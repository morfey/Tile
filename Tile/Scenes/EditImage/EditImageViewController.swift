//
//  EditImageViewController.swift
//  Tile
//
//  Created by  Tim on 16.10.2017.
//  Copyright (c) 2017 TimHazhyi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AKImageCropperView

@objc protocol EditImageDisplayLogic: class
{
    func displayFiltersScrollView(viewModel: UIScrollView)
    func filterButtonTapped(sender: UIButton)
    func setImage(image: UIImage)
}

class EditImageViewController: UIViewController, EditImageDisplayLogic
{
    var interactor: EditImageBusinessLogic?
    var router: (NSObjectProtocol & EditImageRoutingLogic & EditImageDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = EditImageInteractor()
        let presenter = EditImagePresenter()
        let router = EditImageRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    var CIFilterNames = [
        "CIPhotoEffectChrome",
        "CIPhotoEffectFade",
        "CIPhotoEffectInstant",
        "CIPhotoEffectNoir",
        "CIPhotoEffectProcess",
        "CIPhotoEffectTonal",
        "CIPhotoEffectTransfer",
        "CISepiaTone"
    ]
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        initImage()
        //configure()
    }
    
    func initImage() {
        interactor?.setImage()
        configure()
    }
    
    @objc func filterButtonTapped(sender: UIButton) {
        originalImage.isHidden = true
        let button = sender as UIButton
        imageCropperView.image = button.backgroundImage(for: .normal)
    }
    
    @IBAction func saveBtnTapped(_ sender: Any) {
        interactor?.setImageWithFilter(image: imageCropperView.image!)
        router?.routeToTiles(segue: nil)
    }
    
    @IBAction func cropBtnTapped(_ sender: Any) {
        originalImage.isHidden = true
        if imageCropperView.isOverlayViewActive {
            imageCropperView.image = imageCropperView.croppedImage
            imageCropperView.hideOverlayView(animationDuration: 0.3)
            UIView.animate(withDuration: 0.3, delay: 0, options: UIViewAnimationOptions.curveLinear, animations: {
                self.actionView.alpha = 0
                //self.imageCropperView.isHidden = true
            }, completion: nil)
            //self.imageToFilter.image = self.imageCropperView.croppedImage
        } else {
            imageCropperView.isHidden = false
            actionView.isHidden = false
            let image = imageCropperView.image != nil ? imageCropperView.image : originalImage.image
            imageCropperView.image = image
            imageCropperView.showOverlayView(animationDuration: 0.3)
            UIView.animate(withDuration: 0.3, delay: 0.3, options: UIViewAnimationOptions.curveLinear, animations: {
                self.actionView.alpha = 1
            }, completion: nil)
        }
    }
    
    var angle: Double = 0.0
    
    @IBAction func rotateAction(_ sender: AnyObject) {
        angle += .pi / 2
        imageCropperView.rotate(angle, withDuration: 0.3, completion: { _ in
            if self.angle == 2 * .pi {
                self.angle = 0.0
            }
        })
    }
    
    @IBAction func resetAction(_ sender: AnyObject) {
        imageCropperView.reset(animationDuration: 0.3)
        angle = 0.0
    }
    
    // MARK: Do something
    @IBOutlet weak var conteinerImage: UIView!
    @IBOutlet weak var originalImage: UIImageView!
    @IBOutlet weak var filtersScrollView: UIScrollView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var imageCropperView: AKImageCropperView!
    @IBOutlet weak var actionView: UIView!
    
    func configure() {
        let request = EditImage.Filters.Request(filters: CIFilterNames, originalImage: originalImage.image!)
        interactor?.applyFilters(request: request)
    }
    
    func setImage(image: UIImage) {
        originalImage.image = image
    }
    
    func displayFiltersScrollView(viewModel: UIScrollView) {
        activityIndicator.stopAnimating()
        viewModel.subviews.forEach {
            filtersScrollView.addSubview($0)
        }
        filtersScrollView.contentSize = viewModel.contentSize
    }
}
