//
//  EditImageViewController.swift
//  Tile
//
//  Created by  Tim on 16.10.2017.
//  Copyright (c) 2017 TimHazhyi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditImageDisplayLogic: class
{
    func displaySomething(viewModel: EditImage.Something.ViewModel)
    func displayFiltersScrollView(viewModel: EditImage.Filters.ViewModel)
}

class EditImageViewController: UIViewController, EditImageDisplayLogic
{
    var interactor: EditImageBusinessLogic?
    var router: (NSObjectProtocol & EditImageRoutingLogic & EditImageDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = EditImageInteractor()
        let presenter = EditImagePresenter()
        let router = EditImageRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    var CIFilterNames = [
        "CIPhotoEffectChrome",
        "CIPhotoEffectFade",
        "CIPhotoEffectInstant",
        "CIPhotoEffectNoir",
        "CIPhotoEffectProcess",
        "CIPhotoEffectTonal",
        "CIPhotoEffectTransfer",
        "CISepiaTone"
    ]
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        configure()
    }
    
    @objc func filterButtonTapped(sender: UIButton) {
        let button = sender as UIButton
        imageToFilter.image = button.backgroundImage(for: .normal)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var conteinerImage: UIView!
    @IBOutlet weak var originalImage: UIImageView!
    @IBOutlet weak var imageToFilter: UIImageView!
    @IBOutlet weak var filtersScrollView: UIScrollView!
    
    func doSomething()
    {
        let request = EditImage.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func configure() {
        let request = EditImage.Filters.Request(filters: CIFilterNames, originalImage: originalImage.image!)
        interactor?.applyFilters(request: request)
    }
    
    func displaySomething(viewModel: EditImage.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func displayFiltersScrollView(viewModel: EditImage.Filters.ViewModel) {
        var xCoord: CGFloat = 5
        let yCoord: CGFloat = 5
        let buttonWidth:CGFloat = 70
        let buttonHeight: CGFloat = 70
        let gapBetweenButtons: CGFloat = 5
        
        var itemCount = 0
        
        for (index, i) in viewModel.images.enumerated() {
            itemCount = index
            let filterButton = UIButton(type: .custom)
            filterButton.frame = CGRect(x: xCoord, y: yCoord, width: buttonWidth, height: buttonHeight)
            filterButton.tag = itemCount
            filterButton.addTarget(self, action: #selector(filterButtonTapped(sender:)), for: .touchUpInside)
            filterButton.layer.cornerRadius = 6
            filterButton.clipsToBounds = true
            let imageForButton = UIImage(cgImage: i)
            filterButton.setBackgroundImage(imageForButton, for: .normal)
            filterButton.contentMode = .scaleAspectFit
            xCoord +=  buttonWidth + gapBetweenButtons
            filtersScrollView.addSubview(filterButton)
        }
        filtersScrollView.contentSize = CGSize(width: buttonWidth * CGFloat(itemCount + 2), height: yCoord)
    }
}
